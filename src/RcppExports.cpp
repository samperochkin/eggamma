// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dggamma_single_cpp
double dggamma_single_cpp(double x, double mu, double sigma, double nu, NumericVector epsilon, int kappa, bool return_log, bool negate_loglik);
RcppExport SEXP _eggamma_dggamma_single_cpp(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP epsilonSEXP, SEXP kappaSEXP, SEXP return_logSEXP, SEXP negate_loglikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< bool >::type return_log(return_logSEXP);
    Rcpp::traits::input_parameter< bool >::type negate_loglik(negate_loglikSEXP);
    rcpp_result_gen = Rcpp::wrap(dggamma_single_cpp(x, mu, sigma, nu, epsilon, kappa, return_log, negate_loglik));
    return rcpp_result_gen;
END_RCPP
}
// dggamma_cpp
NumericVector dggamma_cpp(NumericVector x, NumericVector mu, NumericVector sigma, NumericVector nu, NumericVector epsilon, int kappa, bool return_log, bool negate_loglik);
RcppExport SEXP _eggamma_dggamma_cpp(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP epsilonSEXP, SEXP kappaSEXP, SEXP return_logSEXP, SEXP negate_loglikSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< bool >::type return_log(return_logSEXP);
    Rcpp::traits::input_parameter< bool >::type negate_loglik(negate_loglikSEXP);
    rcpp_result_gen = Rcpp::wrap(dggamma_cpp(x, mu, sigma, nu, epsilon, kappa, return_log, negate_loglik));
    return rcpp_result_gen;
END_RCPP
}
// nllggamma_single_gh_cpp
NumericVector nllggamma_single_gh_cpp(double x, double mu, double sigma, double nu, NumericVector epsilon, int kappa);
RcppExport SEXP _eggamma_nllggamma_single_gh_cpp(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP epsilonSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(nllggamma_single_gh_cpp(x, mu, sigma, nu, epsilon, kappa));
    return rcpp_result_gen;
END_RCPP
}
// nllggamma_single_g_cpp
NumericVector nllggamma_single_g_cpp(double x, double mu, double sigma, double nu, NumericVector epsilon, int kappa);
RcppExport SEXP _eggamma_nllggamma_single_g_cpp(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP epsilonSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(nllggamma_single_g_cpp(x, mu, sigma, nu, epsilon, kappa));
    return rcpp_result_gen;
END_RCPP
}
// nllggamma_cpp
NumericMatrix nllggamma_cpp(NumericVector x, NumericVector mu, NumericVector sigma, NumericVector nu, NumericVector weights, NumericVector epsilon, int kappa, bool with_hessian, bool add);
RcppExport SEXP _eggamma_nllggamma_cpp(SEXP xSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP nuSEXP, SEXP weightsSEXP, SEXP epsilonSEXP, SEXP kappaSEXP, SEXP with_hessianSEXP, SEXP addSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< bool >::type with_hessian(with_hessianSEXP);
    Rcpp::traits::input_parameter< bool >::type add(addSEXP);
    rcpp_result_gen = Rcpp::wrap(nllggamma_cpp(x, mu, sigma, nu, weights, epsilon, kappa, with_hessian, add));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_eggamma_dggamma_single_cpp", (DL_FUNC) &_eggamma_dggamma_single_cpp, 8},
    {"_eggamma_dggamma_cpp", (DL_FUNC) &_eggamma_dggamma_cpp, 8},
    {"_eggamma_nllggamma_single_gh_cpp", (DL_FUNC) &_eggamma_nllggamma_single_gh_cpp, 6},
    {"_eggamma_nllggamma_single_g_cpp", (DL_FUNC) &_eggamma_nllggamma_single_g_cpp, 6},
    {"_eggamma_nllggamma_cpp", (DL_FUNC) &_eggamma_nllggamma_cpp, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_eggamma(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
